UWP Cheat Sheet
****************

UWP-04 - What is XAML?
================================
XAML - XML Syntax, create instances of Classes that define the UI.

UWP-05 - Understanding Type Converters
================================
Type Converters - Convert literal strings in XAML into enumerations, instances of classes, etc.

UWP-06 - Understanding Default Properties, Complex Properties and the Property Element Syntax
================================

Default Property ... Ex. sets Content property:
<Button>Click Me</Button>

Complex Properties - Break out a property intoo its own element syntax:

    <Button Name="ClickMeButton" Content="Click Me" HorizontalAlignment="Left" Margin="20,20,0,0" VerticalAlignment="Top"
                Click="ClickMeButton_Click" Width="200" Height="100">
            <Button.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                            <GradientStop Color="#FFE85959" Offset="1"/>
                </LinearGradientBrush>
            </Button.Background>
        </Button>

UWP-07 - Understanding XAML Schemas and Namespace Declarations
================================

Don't touch the schema stuff - it's necessary!

Schemas define rules for XAML, for UWP, for designer support, etc.

Namespaces tell XAML parser where to find the definition / rules for a given element in the XAML.

UWP-08 - Layout with Grids
================================

Layout controls don't have a content property... they have a Children property of type UIElementCollection.

By embedding any control inside of a layout control, you are implicitly calling the Add method of the Children collection property.

Sizes expressed in terms of:

Explicit pixels - 100

Auto - use the largest value of elements it contains to define the width/height.

*(Star Sizing) - Utilize all the available space

1* - Of all available space, give me 1 "share"
2* - Of all available space, give me 2 "shares"
3* - Of all available space, give me 3 "shares"

6 total shares... 3* would be 50% of the available width/height.

...
    ...
    <Button Grid.Row = "0" />
</Grid>

- When referencing Rows and Columns... 0-based.
- There's always one default implicit cell: Row 0, Column 0
- If not specified, element will be in the default cell

UWP-09 - Layout with StackPanel
================================

<StackPanel>
    <TextBlock>Top</TextBlock>
    <TextBlock>Bottom</TextBlock>
</StackPanel>

- Vertical Orientation by default.
- Left-to-right flow by default when Horizontal orientation.
- Most layouts will combine multiple layour controls.
- Grid will overlap controls. StackPanel will stack them.

UWP-011 - Laudable Layout Challenge
================================

1. Use only a Grid control.
2. The large textblock's size is 48 points.
3. Mosto of the margins are either 10 or 20 pixels.
4. The TextBlocks for First Name, Last Name and Email should be centered vertically in the row.

6. You'll need to figure out how to allow your TextBlock title to span multiple columns.